# labels.module

module

# This works for both iterators defined in this module!
use iter_types subr_t

# For gen_subroutines
use producer iter_types p_next p_done

# gen_all_subroutines consuming gen_modules
use consumer as consume_modules modules.iter_types c_yield_m c_done_m

# For gen_all_subroutines as a producer
# consume_modules.p_next gets replaced with consumer.p_next after the first call
use producer as produce_all iter_types consume_modules.p_next p_done_s

# gen_all_subroutines consuming gen_subroutines
use consumer iter_types produce_all.c_yield consume_modules.p_next
          -> new_p_next: produce_all.new_p_next


var mod is module


function gen_all_subroutines name$ returning iter_types.p_config_t
    # Generates all subroutines named name$ in all modules and not requiring
    # any parameters.

    consume_modules.ready {modules.gen_modules}
    #telemetry.report_string key: "gen_all_subroutines"
    #                     -> value: "goto produce_all.start"
    goto produce_all.start return_label

  ################### *_m: my interface to module.gen_modules #############
  label c_yield_m mod
    #telemetry.report_string key: "gen_all_subroutines.c_yield_m"
    #                     -> value: "got module"
    goto consumer.start {gen_subroutines mod name$}

  label c_done_m              # no more modules
    #telemetry.report_string key: "gen_all_subroutines.c_done_m"
    #                     -> value: "no more modules, goto produce_all.c_done!"
    done                      # I'm done!
    goto produce_all.c_done   # final goodbye, back to my consumer...

  ################### *_s: my interface to my consumer ####################
  subroutine p_done_s    # my consumer is bailing out early...
    #telemetry.report_string key: "gen_all_subroutines.p_done_s" value: "called"
    consumer.p_done          # quit gen_subroutines
    consume_modules.p_done   # quit modules.gen_modules
    done with: gen_all_subroutines
    return


function gen_subroutines mod name$ returning iter_types.p_config_t
    # Generates all of the subroutines named name$ in mod and not requiring
    # any parameters.
    set ilabel to: 0  # auto
    goto producer.start return_label

  label p_next
    ======================================================
    | YN | ilabel < (`` mod `->num_labels`)
    ======================================================
    | X  | goto check_type
    |  X | done
    |    | goto producer.c_done
    ======================================================
  
  label check_type
    =============================================================
    | YYYN | `` mod `->labels[` ilabel `]->type` == "subroutine"
    | YYN- | `` mod `->labels[` ilabel `]->name` == name$
    | YN-- | {requires_params? (`` mod `->labels[` ilabel `]`)}
    =============================================================
    |  X   | set i to: ilabel
    |      | ilabel += 1
    |      | goto producer.c_yield (`` mod `->labels[` i `]`)
    | X XX | ilabel += 1
    |      | goto p_next
    =============================================================
  
  subroutine p_done
    done with: gen_subroutines
    return


function get_subr_name$ s
    var s is subr_t
    return (`` s `->name`)


function get_subr_type$ s
    return (`` s `->type`)


function iget_subr_lineno s
    return (`` s `->lineno`)


function get_subr_module s returning module
    return (`` s `->module`)


function get_subr_module_name$ s
    return (`` s `->module->name`)


function get_label_module lab returning module
    var lab is label
    return (`` lab `->module`)


function get_label_module_name$ lab
    return (`` lab `->module->name`)


function requires_params? s
    set ipb to: 0
    goto check_next

  label check_next
    ======================================================
    | YN | ipb < `` s `->num_param_blocks`
    ======================================================
    | X  | goto check_pb
    |  X | return false?
    ======================================================

  label check_pb
    =========================================================================
    | YYNN | `` s `->param_block_descriptors[` ipb `].name == NULL`
    | YN-- | `` s `->param_block_descriptors[` ipb `].num_required_params` > 0
    | --YN | `` s `->param_block_descriptors[` ipb `].kw_mask` == 0
    =========================================================================
    |  X X | ipb += 1
    |      | goto check_next
    | X X  | return true?
    =========================================================================

