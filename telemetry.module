# telemetry.module

module


subroutine report_integer key: key$ value: ivalue
    `printf("%s: %ld\n", ` key$ `, ` ivalue `);`
    return


subroutine report_float key: key$ value: value
    # 4 digits are printed in engineering notation.
    # numbers less than 1e-6 are printed as 0.0.
    =======================================================
    | YN | (abs value) < 1e-6
    =======================================================
    | X  | `printf("%s: 0.0\n", ` key$ `);`
    |    | return
    |  X | goto non_zero
    =======================================================

  label non_zero
    # Adding 0.000021715266982 is multiplying by 10**0.000021715266982 or 
    # 1.0000500025001264, which is slightly more than 10 / 9.9995
    # (1.000050002500125) to account for rounding causing an additional most
    # significant digit.
    set flog to: (`log10(` (abs value) `) + 0.000021715266982`)

    # The exponent to use in the outputed string.
    # (Note, this is a floating integer).
    set eng to: (`floor(` (flog / 3.0) `) * 3`)

    # Value adjusted to take out the eng exponent.
    set adj_value to: (value / `exp10(` eng `)`)

    # Num of digits to the right of the decimal.
    set inum_decimals to: (4 - (`(int)(` (`ceil(` flog `)` - eng) `)`) )
    =========================================================
    | YN | eng == 0
    =========================================================
    | X  | `printf("%s: %.*f\n", ` key$ `, (int)(` inum_decimals `), `
                              -> adj_value `);`
    |    | return
    |  X | `printf("%s: %.*fe%.0f\n", ` key$ `, (int)(` inum_decimals `), `
                                   -> adj_value `, ` eng `);`
    |    | return
    =========================================================


subroutine report_string key: key$ value: value$
    `printf("%s: %s\n", ` key$ `, ` value$ `);`
    return


subroutine report_boolean key: key$ value: value?
    `printf("%s: %d\n", ` key$ `, ` value? `);`
    return
